using System;

public class Client
{
	private string name;
	private string location;
	private double totalIncome;
	private double exportRate;
	
	public Client (string name, string location, double totalIncome, double exportRate)
	{
		this.name = name;
		this.location = location;
		this.totalIncome = totalIncome;
		this.exportRate = exportRate;
	}
	public string GetName()
	{
		return name;
	}
	public string GetLocation()
	{
		return location;
	}		
	public double GetTotalIncome()
	{
		return totalIncome;
	}		
	public double GetExportRate()
	{
		return exportRate;
	}
}
public class Bank : Client
{
	private double amountOfGivenLoans;
	private int interestRate;
	private string typeOfBank;
	public double Revenue_Reinvestment = 0.2;
	
	
	public Bank(string name, string location, double totalIncome, double exportRate, double amountOfGivenLoans, int interestRate, string typeOfBank)
	
	:base(name, location, totalIncome, exportRate)
	{
		this.amountOfGivenLoans = amountOfGivenLoans;
		this.interestRate = interestRate;
		this.typeOfBank = typeOfBank;
	}
	public double GetAmountOfGivenLoans()
	{
		return amountOfGivenLoans;
	}
	public int GetInterestRate()
	{
		return interestRate;
	}
	public string GetTypeOfBank()
	{
		return typeOfBank;
	}
	public override double CalculateNetRevenuePercentage()
	{
		double grossTotal = GetTotalIncome() + (GetTotalIncome()*interestRate);
		double taxedIncome = grossTotal - (grossTotal * taxPercentage);
		double netRevenue = (taxedIncome - (taxedIncome * Revenue_Reinvestment));
		double netRevenuePercentage = ((netRevenue / grossTotal)*100);
		return netRevenuePercentage;
	}
}
public class PrivateOwnEnterprise : Client
{
	private string CEOname;
    private string shareholder;
    private string employee;

    public PrivateOwnEnterprise (string name, string location, double totalIncome, double exportRate, string CEOname, string shareholder, string employee)
	
	:base(name, location, totalIncome, exportRate)
	{
		this.CEOname = CEOname;
		this.shareholder = shareholder;
		this.employee = employee;
	}
	public string GetCEOname()
	{
		return CEOname;
	}
	public string GetShareholder()
	{
		return shareholder;
	}
	public string GetEmployee()
	{
		return employee;
	}
    public override double CalculatePrivateNetPercentage()
	{
		double netIncome = (GetTotalIncome() - (GetTotalIncome() * taxPercentage));
		double netPrivateRevenuePercentage = (netIncome/getTotalIncome()*100);
		return netPrivateRevenuePercentage;
	}	
}
public class StateOwnedEnterprise : Client
{
	private string NameOfBusinessInCoalition;
	private int investmentTotal;
	int Goverment_Divident = 0.35;
	
	public StateOwnedEnterprise(string name, string location, double totalIncome, double exportRate, string NameOfBusinessInCoalition, int investmentTotal)

	:base(name, location, totalIncome, exportRate)
	{
		this.NameOfBusinessInCoalition = NameOfBusinessInCoalition;
		this.investmentTotal = investmentTotal;
	}
	public int GetInvestmentTotal()
	{
		return investmentTotal;
	}
	public string ReturnBusinessName()
	{
		return NameOfBusinessInCoalition;
	}
	public override double CalculateStateNetRevenuePercentage()
	{
		double grossIncome = GetTotalIncome() + GetInvestmentTotal();
		double taxedIncome = (GetTotalIncome() - (GetTotalIncome() * taxPercentage));
		double netProfits = (taxedIncome - (taxedIncome * Goverment_Divident));
		double netStateRevenuePercentage = ((netProfits / grossIncome)*100;
		return netStateRevenuePercentage;
	}
}
public class ProlineData
{
	List <Client> proClient;
	
	public ProlineData()
	{
            proClient = new List<Client>(100)
	}
	public void AddClient(Client d)
	{
        try
        {
            proClient.Add(d);
        }
        catch (IndecOutOfRangeException e)
        {
            throw e;
        }
        catch (Exception e)
        {
            throw e;
        }
    }
	public double AverageIncome()
    {
        double sum = 0;
        int count = 0;
        for (int i = 0; i < proClient.Count; i++)
        {
            sum += proClient[i].GetTotalIncome();
            count++;
        }
            return sum / count;
        }
    }	
	public (int, int, int) TotalTypeofClients()
    {
        int banksTotal = 0;
        int privateTotal = 0;
        int stateOwnedTotal = 0;
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i] is Bank)
            {
                banksTotal++;
            }
            else if (proClient[i] is PrivateOwnedEnterprise)
            {
                privateTotal++;
            }
            else
            {
                stateOwnedTotal++;
            }
        }
            return (banksTotal, privateTotal, stateOwnedTotal);
    }
	public int HowManyClientsAreInNamibia()
    {
        int namClients = 0;
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i].GetLocation() == "Namibia")
            {
                namClients++;
            }
        }
        return namClients;
    }	 
	public Client ClientWithLowestExportRate()
    {
        Client clientDetail = proClient[0];
        double low_rate = proClient[0].GetExportRate();
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i].GetExportRate() < low_rate)
            {
                low_rate = proClient[i].GetExportRate();
                clientDetail = proClient[i];
            }
        }
            return clientDetail;
    }
    public int NumberOfClientWithExportRateOver1000()
    {
        int sum = 0;
        for (int i = 0; i < proClient.Count; i++)
        {
           if (proClient[i].GetExportRate() > 1000)
            {
                sum += 1;
            }
        }
        return sum;
    }
    public bool IfClientWithSpecificTotalIncome(int totalIncome)
    {
        bool check = false;
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i].GetTotalIncome().Equals(totalIncome))
            {
                check = true;
            }
        }
        return check;
    }
    public Client ClientWithSpecificCEO(string c)
    {
        Client pos = proClient[0];
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i] is PrivateOwnedEnterprise)
            {
                if (((PrivateOwnedEnterprise)client[i]).GetCEOName().Equals(c))
                {
                    pos = proClient[i];
                }
            }
        }
        return pos;
    }
    public int TotalAmountOfLoanGivenByBanks()
    {
        int loanTotal = 0;
        for (int i = 0; i < proClient.Count; i++)
        {
            if (client[i] is Bank)
            {
                loanTotal += ((Bank)proClient[i]).GetLoanTotal();
            }
        }
        return loanTotal;
    }
    public double AverageIncomeOfNamibians()
    {
        int count = 0;
        double avgNam = 0;
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i].GetLocation() == "Namibia")
            {
                avgNam += proClient[i].GetTotalIncome();
                count++;
            }
        }
        return avgNam / count;
    }	
    public double AverageIncomeOfClientsOutsideNamibia()
    {
        double nonNamIncome = 0;
        double counter = 0;
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i].GetLocation() != "Namibia")
            {
                nonNamIncome += proClient[i].GetTotalIncome();
                counter++;
            }
        }
        return nonNamIncome / counter;
    }     
    public Client ClientsofSpecificLocation(string L)
    {
        Client cl = proClient[0];
        string clientLocation = L;
        for (int i = 0; i < proClient.Count; i++)
        {
            if (proClient[i].GetLocation().Equals(clientLocation))
            {
                cl = proClient[i];
            }
        }
            return cl;
    }
    public string StringManipulation()
    {
        string line = " ";
        for (int i = 0; i < devices.Count; i++)
        {
            if (proClient[i].GetBrand().StartsWith("Namibia"))
            {
                line += proClient[i].ToString();
            }
        }
        return line;
    }
    public string ReadFile(string path)
    {
        FileStream infile;
        StreamReader read;
        string message ;
		
        try
        {
            infile = new FileStream(path, FileMode.Open, FileAccess.Read);
            read = new StreamReader(infile);
            message = read.ReadToEnd();
            infile.Close();
            read.Close();
        }
        catch(FileNotFoundException e)
        {
            throw e;
        }
        catch(Exception e)
        {
            throw e;
        }
            return message;
        }
    }
    public void SaveClientWithLowestExportRate(string path)
    {
    FileStream outfile;
    StreamWriter write;
    try
    {
        outfile = new FileStream(path, FileMode.Append, FileAccess.Write);
        write = new StreamWriter(outfile);
        write.WriteLine(ClientWithLowestExportRate());
        write.Close();
        outfile.Close();
    }
    catch(AccessViolationException e)
    {
        throw e;
    }
    catch (Exception e)
    {
        throw e;
    }
    public string ReadFile(string path)
    {
        FileStream infile;
        StreamReader read;
        string message ;
		
        try
        {
            infile = new FileStream(path, FileMode.Open, FileAccess.Read);
            read = new StreamReader(infile);
            message = read.ReadToEnd();
            infile.Close();
            read.Close();
        }
        catch(FileNotFoundException e)
        {
            throw e;
        }
        catch(Exception e)
        {
            throw e;
        }

            return message;
        }
    }
}
 public static void Main(string[] args)
 { 
     ProlineData DB = new ProlineData();


     Client [] proClient = new Client[10];
     proClient[0] =new Bank("Bank Windhoek", "Namibia", 10000000.00, 32.34, 120.00, 30, "Commerical");
     proClient[0] =new Bank("FNB", "Namibia", 40000000.00, 25.01, 843.00, 23, "Local");
     proClient[8] = new StateOwnedEnterprise("Harare Sports Club", "Zimbabwe", 10600.00, 9.65, "Zanu PF", 1000000.00);
     proClient[3] =new PrivateOwnedEnterprise("Sanlam", "Namibia", 1000000.00, 17.90, "Mohammad", "First Capital", "Peter");
     proClient[0] =new Bank("Barcley", "South Africa", 5000000.00, 37.12, 60.00, 43, "Private");
     proClient[8] = new StateOwnedEnterprise("RiverSide Game Park", "South Africa", 110800.00, 10.65, "Environment Management Agent", 900000.00);
     proClient[3] =new PrivateOwnedEnterprise("Makney", "Zimbabwe", 700000.00, 13.90, "Patrick", "Miles Ent.", "Clemence");
     proClient[0] =new Bank("FBC", "Zimbabwe", 800000.00, 32.34, 120.00, 30, "Commerical");
     proClient[8] = new StateOwnedEnterprise("Hage.G Stadium", "Namibia", 120699.00, 10.65, "Swapo", 8000000.00);
     proClient[3] =new PrivateOwnedEnterprise("NUST", "Namibia", 900000.00, 16,88, "Nelson", "UNR", "Erick");
 
 //Adding devices to my array
 
     DB.AddClient(proClient[0]);
     DB.AddClient(proClient[1]);
     DB.AddClient(proClient[2]);
     DB.AddClient(proClient[3]);
     DB.AddClient(proClient[4]);
     DB.AddClient(proClient[5]);
     DB.AddClient(proClient[6]);
     DB.AddClient(proClient[7]);
     DB.AddClient(proClient[8]);
     DB.AddClient(proClient[9]);
     
     Console.WriteLine("The client with the lowest export rate is : " +
     DB.ClientWithLowestExportRate())
     
     Console.WriteLine("The following are clients from Namibia : ");
     Console.WriteLine(DB.StringManipulation());
     
     DB.SaveClientWithLowestExportRate(@"C:\OOP\save.txt");
     
     Console.WriteLine("Reading from File: ");
     Console.WriteLine(DB.ReadFile(@"C:\OOP\save.txt"));
     Console.ReadLine();
 }

